{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearch","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","toLocaleLowerCase","includes","length","searchField","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAoBeA,EAhBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAEvB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,gCAA2BH,EAA3B,cACrB,sBAAKC,UAAU,KAAf,UAEI,6BAAKH,IAEL,4BAAIC,WCmBLK,EA7BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAWf,OACA,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCJVC,G,KAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,8BACI,uBACAV,UAAU,6BACVW,KAAK,OACLC,YAAY,eACZC,SAAUH,QCAPI,EARD,SAACC,GACX,OACI,qBAAKC,MAAO,CAAEC,UAAY,SAAUC,OAAO,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YC0CJC,G,wDAvCX,aAAc,IAAD,8BACT,gBAeJC,SAAW,SAACC,GACR,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRK,YAAa,IANR,E,qDAUb,WAAoB,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACpB,OAAS4B,S,oBAM5C,WACI,MAA8BC,KAAKN,MAA5BvB,EAAP,EAAOA,OAAQK,EAAf,EAAeA,YACTyB,EAAe9B,EAAO+B,QAAO,SAAA/B,GAC/B,OAAOA,EAAOP,KAAKuC,oBAAoBC,SAAS5B,EAAY2B,wBAIhE,OAAQhC,EAAOkC,OAEP,sBAAKtC,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWU,aAAcuB,KAAKX,SAAUiB,YAAaN,KAAKX,WAC1D,cAAC,EAAD,UACI,cAAC,EAAD,CAAUlB,OAAQ8B,SANV,4C,GA3BdM,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.923cae31.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// props is the combinations of all the paraeters or properties\r\n// const Card = (props) => {\r\nconst Card = ({name, email,id}) => {\r\n    // const {name, email,id}=props;\r\n    return(\r\n        <div className='bg-light-green pa3 ma2 br3 grow dib bw2 shadow-5'>\r\n            <img alt=\"Robots\" src={`https://robohash.org/ ${id}?200*200`}/>\r\n            <div className='tc'>\r\n                {/* <h3>{props.name}</h3> */}\r\n                <h3>{name}</h3>\r\n                {/* <p>{props.email}</p> */}\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n    /* const cardsArray = robots.map((user,i) => {\r\n    //     return (\r\n    //         <Card \r\n    //             key={i} \r\n    //             id={robots[i].id} \r\n    //             name={robots[i].name} \r\n    //             email={robots[i].email}\r\n    //         />\r\n    //     );\r\n     })*/\r\n    return(\r\n    <div>\r\n    {\r\n        robots.map((user,i) => {\r\n            return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                />\r\n            );\r\n        })\r\n    }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n/* key prop should have something that doesnt change.for example array index could change\r\nif array item get ChannelMergerNode. so better key in this case would be something unique like id*/","import React from \"react\";\r\nimport 'tachyons'; \r\n\r\nconst Searchbox = ({searchfield,searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input\r\n            className=\"bg-light-green pa2 ma3 br3\" \r\n            type=\"text\" \r\n            placeholder=\"search robot\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from \"react\";\r\n\r\nconst Scroll =(props) => {\r\n    return (\r\n        <div style={{ overflowY : \"scroll\", border:'1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\nimport CardList from \"../Components/CardList\";\r\nimport Searchbox from \"../Components/Searchbox.js\";\r\n//import {robots} from '../Components/robots';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        //The state is an instance of React Component Class can be defined as an object of a set of observable properties that control the behavior of the component. \r\n        //In other words, the State of a component is an object that holds some information that may change over the lifetime of the component.\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '' \r\n        }       \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({robots : users})})  ;      \r\n    }\r\n\r\n    onSearch = (event) => {\r\n        this.setState({searchfield: event.target.value})               \r\n        }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const filterRobots = robots.filter(robots => {\r\n            return robots.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase())\r\n            //The includes() method returns true if a string contains a specified string, otherwise false.\r\n        })\r\n        //Ternary operators(Conditional ! :)\r\n        return !robots.length ? <h1>Loding</h1>\r\n        : (\r\n                <div className='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                    <Searchbox searchChange={this.onSearch} searchField={this.onSearch}/>\r\n                    <Scroll>\r\n                        <CardList robots={filterRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}